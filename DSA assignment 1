implementation of adjacency list, BFS, and DFS in Python:

class Graph:
    def __init__(self, num_vertices):
        self.num_vertices = num_vertices
        self.adj_lists = [[] for _ in range(num_vertices)]

    def add_edge(self, src, dest):
        self.adj_lists[src].append(dest)

    def print_adj_list(self):
        for i in range(self.num_vertices):
            print(f"{i} -> {self.adj_lists[i]}")

    def dfs(self, start_vertex):
        visited = [False] * self.num_vertices
        self._dfs_helper(start_vertex, visited)

    def _dfs_helper(self, vertex, visited):
        visited[vertex] = True
        print(vertex, end=" ")
        for neighbor in self.adj_lists[vertex]:
            if not visited[neighbor]:
                self._dfs_helper(neighbor, visited)

    def bfs(self, start_vertex):
        visited = [False] * self.num_vertices
        queue = []
        queue.append(start_vertex)
        visited[start_vertex] = True
        while queue:
            vertex = queue.pop(0)
            print(vertex, end=" ")
            for neighbor in self.adj_lists[vertex]:
                if not visited[neighbor]:
                    queue.append(neighbor)
                    visited[neighbor] = True


# Example usage
num_vertices = 5
graph = Graph(num_vertices)
graph.add_edge(0, 1)
graph.add_edge(0, 2)
graph.add_edge(1, 3)
graph.add_edge(1, 4)

print("Adjacency List:")
graph.print_adj_list()

print("\nDFS Traversal:")
graph.dfs(0)

print("\n\nBFS Traversal:")
graph.bfs(0)
```


Output:


```
Adjacency List:
0 -> [1, 2]
1 -> [3, 4]
2 -> []
3 -> []
4 -> []

DFS Traversal:
0 1 3 4 2 

BFS Traversal:
0 1 2 3 4 
```Here's an implementation of adjacency list, BFS, and DFS in Python:


class Graph:
    def __init__(self, num_vertices):
        self.num_vertices = num_vertices
        self.adj_lists = [[] for _ in range(num_vertices)]

    def add_edge(self, src, dest):
        self.adj_lists[src].append(dest)

    def print_adj_list(self):
        for i in range(self.num_vertices):
            print(f"{i} -> {self.adj_lists[i]}")

    def dfs(self, start_vertex):
        visited = [False] * self.num_vertices
        self._dfs_helper(start_vertex, visited)

    def _dfs_helper(self, vertex, visited):
        visited[vertex] = True
        print(vertex, end=" ")
        for neighbor in self.adj_lists[vertex]:
            if not visited[neighbor]:
                self._dfs_helper(neighbor, visited)

    def bfs(self, start_vertex):
        visited = [False] * self.num_vertices
        queue = []
        queue.append(start_vertex)
        visited[start_vertex] = True
        while queue:
            vertex = queue.pop(0)
            print(vertex, end=" ")
            for neighbor in self.adj_lists[vertex]:
                if not visited[neighbor]:
                    queue.append(neighbor)
                    visited[neighbor] = True


# Example usage
num_vertices = 5
graph = Graph(num_vertices)
graph.add_edge(0, 1)
graph.add_edge(0, 2)
graph.add_edge(1, 3)
graph.add_edge(1, 4)

print("Adjacency List:")
graph.print_adj_list()

print("\nDFS Traversal:")
graph.dfs(0)

print("\n\nBFS Traversal:")
graph.bfs(0)
```


Output:


```
Adjacency List:
0 -> [1, 2]
1 -> [3, 4]
2 -> []
3 -> []
4 -> []

DFS Traversal:
0 1 3 4 2 

BFS Traversal:
0 1 2 3 4 
```
